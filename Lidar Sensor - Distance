#include <msp430.h>

#define SENSOR_ADDR 0x10 // I2C address of the sensor
#define DIST_REG 0x8f // Register address for distance measurements

unsigned char distance; // variable to store distance measurement

void initI2C()
{
    UCB0CTLW0 = UCSWRST; // software reset
    UCB0CTLW0 |= UCMODE_3 | UCMST | UCSYNC; // I2C mode, synchronous mode
    UCB0BRW = 10; // SCL = SMCLK/10 = 100kHz
    UCB0CTLW0 |= UCSSEL__SMCLK; // SMCLK clock source
    P1SEL0 |= BIT2 | BIT3; // P1.2 and P1.3 as I2C pins
    P1SEL1 &= ~(BIT2 | BIT3);
    UCB0CTLW0 &= ~UCSWRST; // release software reset
}

void startMeasurement()
{
    unsigned char txData[1] = {0x51}; // command to start measurement
    UCB0I2CSA = SENSOR_ADDR; // set sensor address
    UCB0CTLW0 |= UCTR + UCTXSTT; // transmit mode, start condition
    while (UCB0CTLW0 & UCTXSTT); // wait for start condition to be transmitted
    UCB0TXBUF = txData[0]; // send command byte
    while (!(UCB0IFG & UCTXIFG0)); // wait for transmission to complete
    UCB0CTLW0 |= UCTXSTP; // stop condition
    while (UCB0CTLW0 & UCTXSTP); // wait for stop condition to be sent
}

unsigned int readDistance()
{
    unsigned char txData[1] = {DIST_REG}; // register address for distance measurement
    unsigned char rxData[2]; // receive buffer for distance measurement
    UCB0I2CSA = SENSOR_ADDR; // set sensor address
    UCB0CTLW0 |= UCTR + UCTXSTT; // transmit mode, start condition
    while (UCB0CTLW0 & UCTXSTT); // wait for start condition to be transmitted
    UCB0TXBUF = txData[0]; // send register address byte
    while (!(UCB0IFG & UCTXIFG0)); // wait for transmission to complete
    UCB0CTLW0 &= ~UCTR; // receive mode
    UCB0CTLW0 |= UCTXSTT; // repeated start condition
    while (UCB0CTLW0 & UCTXSTT); // wait for repeated start condition to be transmitted
    UCB0CTLW0 |= UCTXSTP; // stop condition
    while (UCB0CTLW0 & UCTXSTP); // wait for stop condition to be sent
    int i;
    for (i = 0; i < 2; i++) {
        while (!(UCB0IFG & UCRXIFG0)); // wait for byte to be received
        rxData[i] = UCB0RXBUF; // read received byte into buffer
    }
    distance = (rxData[0] << 8) | rxData[1]; // combine high and low bytes to form distance measurement
    return distance;
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD; // stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5; // unlock GPIO pins

    initI2C(); // initialize I2C

    while (1)
    {
        startMeasurement(); // start distance measurement
        __delay_cycles(60000); // wait for measurement to complete
        distance = readDistance(); // read distance measurement
        // do something with distance measurement
	return distance; 
    }

   
}
