#include <msp430.h>
#include <stdio.h>

/*
* Final project code for LIDAR Sensor device. This should take sensor measurements and
* communicate with a computer over WiFi. These measurements will then be read into a Matlab
* script that will create a 3D figure.
*
* We are using the LIDAR Sensor (I2C), Accelorometer (I2C) to measure movement, and and LED and button for measurement.
*
* TODO Change pins to match what is actually on PCB. Add functionality for the ESP01 WiFi Module. 
*
* Author: Craig Droke and James Galeno
* Version: 1.0
*/

#define LIDAR_ADDR 0x62 // Lidar sensor I2C address
#define LIDAR_CONFIG_REG 0x00 // Register address for configuration mode
#define LIDAR_DIST_REG 0x8f // Register address for distance measurements

#define ACCEL_ADDR 0x18 // Accelerometer I2C address
#define ACCEL_CTRL_REG1 0x2a // Register address for control register 1
#define ACCEL_DATA_REG 0x01 // Register address for data output
#define ACCEL_SENSITIVITY 1024 // Accelerometer sensitivity in LSB/g

void i2c_init() {
  // Initialize I2C module with SDA on P1.7 and SCL on P1.6
  P1SEL |= BIT6 + BIT7;
  P1SEL2 |= BIT6 + BIT7;

  // Configure I2C module
  UCB0CTL1 |= UCSWRST; // Software reset enabled
  UCB0CTL0 = UCMST + UCMODE_3 + UCSYNC; // Master mode, I2C mode, synchronous mode
  UCB0CTL1 = UCSSEL_2 + UCSWRST; // SMCLK as clock source, software reset enabled
  UCB0BR0 = 12; // I2C clock prescaler
  UCB0BR1 = 0;
  UCB0CTL1 &= ~UCSWRST; // Software reset disabled
}

void lidar_init() { //I2C
  // Set Lidar sensor to configuration mode
  unsigned char txData[2] = {LIDAR_CONFIG_REG, 0x00};
  UCB0I2CSA = LIDAR_ADDR;
  UCB0CTL1 |= UCTR + UCTXSTT;
  while (UCB0CTL1 & UCTXSTT);
  UCB0TXBUF = txData[0];
  while (!(UCB0IFG & UCTXIFG));
  UCB0TXBUF = txData[1];
  while (!(UCB0IFG & UCTXIFG));
  UCB0CTL1 |= UCTXSTP;
  while (UCB0CTL1 & UCTXSTP);
}

void accel_init() { //I2C
  // Set accelerometer to active mode and set output data rate to 100 Hz
  unsigned char txData[2] = {ACCEL_CTRL_REG1, 0x57};
  UCB0I2CSA = ACCEL_ADDR;
  UCB0CTL1 |= UCTR + UCTXSTT;
  while (UCB0CTL1 & UCTXSTT);
  UCB0TXBUF = txData[0];
  while (!(UCB0IFG & UCTXIFG));
  UCB0TXBUF = txData[1];
  while (!(UCB0IFG & UCTXIFG));
  UCB0CTL1 |= UCTXSTP;
  while (UCB0CTL1 & UCTXSTP);
}

unsigned int lidar_read() {
  // Read distance measurement from Lidar sensor
  unsigned char txData = LIDAR_DIST_REG;
  unsigned char rxData[2];
  UCB0I2CSA = LIDAR_ADDR;
  UCB0CTL1 |= UCTR + UCTXSTT;
  while (UCB0CTL1 & UCTXSTT);
  UCB0TXBUF = txData;
  while (!(UCB0IFG & UCTXIFG));
  UCB0CTL1 &= ~UCTR;
  UCB0CTL1 |= UCTXSTT;
  while (UCB0CTL1 & UCTXSTT);
  UCB0CTL1 |= UCTXSTP;
  while (UCB0CTL1 & UCTXSTP);
  rxData[0] = UCB0RXBUF;
  while (!(UCB0IFG & UCRXIFG));
  rxData[1] = UCB0RXBUF;
  while (UCB0CTL1 & UCTXSTP);
  return (rxData[0] << 8) + rxData[1];
}

signed int accel_read() {
  // Read acceleration data from accelerometer
  unsigned char txData = ACCEL_DATA_REG;
  unsigned char rxData[6];
  signed int accelVals[3];
  UCB0I2CSA = ACCEL_ADDR;
  UCB0CTL1 |= UCTR + UCTXSTT;
  while (UCB0CTL1 & UCTXSTT);
  UCB0TXBUF = txData;
  while (!(UCB0IFG & UCTXIFG));
  UCB0CTL1 &= ~UCTR;
  UCB0CTL1 |= UCTXSTT;
  while (UCB0CTL1 & UCTXSTT);
  UCB0CTL1 |= UCTXSTP;
  while (UCB0CTL1 & UCTXSTP);
  for (int i = 0; i < 6; i++) {
    rxData[i] = UCB0RXBUF;
    while (!(UCB0IFG & UCRXIFG));
  }
  while (UCB0CTL1 & UCTXSTP);
  accelVals[0] = ((signed int)rxData[1] << 8) + rxData[0];
  accelVals[1] = ((signed int)rxData[3] << 8) + rxData[2];
  accelVals[2] = ((signed int)rxData[5] << 8) + rxData[4];
  return accelVals[0] / ACCEL_SENSITIVITY; // Return x-axis acceleration in g
}

void main(void) {
  // Initialize MSP430 and I2C modules
  WDTCTL = WDTPW + WDTHOLD; // Disable watchdog timer
  BCSCTL1 = CALBC1_1MHZ; // Set DCO to 1 MHz
  DCOCTL = CALDCO_1MHZ;
  i2c_init();
  lidar_init();
  accel_init();

  // Initialize button
  P1DIR &= ~BIT3; // Set P1.3 as input
  P1REN |= BIT3; // Enable pull-up/down resistor on P1.3
  P1OUT |= BIT3; // Set P1.3 to pull-up resistor

  // Main loop
  while(1) {
    unsigned int distance = lidar_read(); // Read distance measurement from Lidar sensor
    signed int accel_x = accel_read(); // Read acceleration measurement from accelerometer
    printf("Distance: %d cm\n", distance);
    printf("Acceleration (x-axis): %d g\n", accel_x);

    // Poll button state
    if ((P1IN & BIT3) == 0) { // Button is pressed
      while ((P1IN & BIT3) == 0) {} // Wait for button release
      break; // Exit main loop
    }

    __delay_cycles(1000000); // Delay for 1 second
  }
}


